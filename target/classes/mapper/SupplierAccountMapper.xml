<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.zq.backstage.dao.SupplierAccountMapper" >
  <resultMap id="BaseResultMap" type="cn.zq.backstage.domain.SupplierAccount" >
    <id column="id" property="id" jdbcType="CHAR" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="supplier_id" property="supplierId" jdbcType="CHAR" />
    <result column="bank_account_name" property="bankAccountName" jdbcType="VARCHAR" />
    <result column="bank_account" property="bankAccount" jdbcType="VARCHAR" />
    <result column="depositBank" property="depositbank" jdbcType="VARCHAR" />
    <result column="duplicateRemove" property="duplicateremove" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, title, supplier_id, bank_account_name, bank_account, depositBank, duplicateRemove
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from supplier_account
    where id = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from supplier_account
    where id = #{id,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="cn.zq.backstage.domain.SupplierAccount" >
    insert into supplier_account (id, title, supplier_id, 
      bank_account_name, bank_account, depositBank, 
      duplicateRemove)
    values (#{id,jdbcType=CHAR}, #{title,jdbcType=VARCHAR}, #{supplierId,jdbcType=CHAR}, 
      #{bankAccountName,jdbcType=VARCHAR}, #{bankAccount,jdbcType=VARCHAR}, #{depositbank,jdbcType=VARCHAR}, 
      #{duplicateremove,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="cn.zq.backstage.domain.SupplierAccount" >
    insert into supplier_account
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="supplierId != null" >
        supplier_id,
      </if>
      <if test="bankAccountName != null" >
        bank_account_name,
      </if>
      <if test="bankAccount != null" >
        bank_account,
      </if>
      <if test="depositbank != null" >
        depositBank,
      </if>
      <if test="duplicateremove != null" >
        duplicateRemove,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=CHAR},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="supplierId != null" >
        #{supplierId,jdbcType=CHAR},
      </if>
      <if test="bankAccountName != null" >
        #{bankAccountName,jdbcType=VARCHAR},
      </if>
      <if test="bankAccount != null" >
        #{bankAccount,jdbcType=VARCHAR},
      </if>
      <if test="depositbank != null" >
        #{depositbank,jdbcType=VARCHAR},
      </if>
      <if test="duplicateremove != null" >
        #{duplicateremove,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.zq.backstage.domain.SupplierAccount" >
    update supplier_account
    <set >
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="supplierId != null" >
        supplier_id = #{supplierId,jdbcType=CHAR},
      </if>
      <if test="bankAccountName != null" >
        bank_account_name = #{bankAccountName,jdbcType=VARCHAR},
      </if>
      <if test="bankAccount != null" >
        bank_account = #{bankAccount,jdbcType=VARCHAR},
      </if>
      <if test="depositbank != null" >
        depositBank = #{depositbank,jdbcType=VARCHAR},
      </if>
      <if test="duplicateremove != null" >
        duplicateRemove = #{duplicateremove,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.zq.backstage.domain.SupplierAccount" >
    update supplier_account
    set title = #{title,jdbcType=VARCHAR},
      supplier_id = #{supplierId,jdbcType=CHAR},
      bank_account_name = #{bankAccountName,jdbcType=VARCHAR},
      bank_account = #{bankAccount,jdbcType=VARCHAR},
      depositBank = #{depositbank,jdbcType=VARCHAR},
      duplicateRemove = #{duplicateremove,jdbcType=TINYINT}
    where id = #{id,jdbcType=CHAR}
  </update>
  <select id="getList" resultMap="BaseResultMap">
    select * from supplier_account
  </select>
</mapper>